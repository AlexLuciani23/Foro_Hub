## Proyecto Foro Hub - Registro de Avances
Objetivo: Dise√±ar e implementar una API REST robusta, segura y escalable para un foro llamado Forohub.
Referencia: https://github.com/VictorRodriguezL/challenge-foro-alura.git (como ejemplo de estructura y buenas pr√°cticas) y Trello https://trello.com/b/9DeAlIsq
Avances:
 1. Dise√±o y Modelado:
     Entidades: Usuario (id, nombre, correo, contrase√±a, roles), T√≥pico (id, t√≠tulo, contenido, autor, fecha), Respuesta (id, contenido, autor, t√≥pico, fecha).
     Diagrama de Clases: [PENDIENTE - Mejorar diagrama con relaciones y cardinalidad]
     Endpoints REST: 
	GET /topicos/{topicoId}/respuestas (Ver las respuestas de un t√≥pico)
	GET /usuarios/{usuarioId}/respuestas (Ver todas las respuestas escritas por un usuario)
	DELETE /respuestas/{respuestaId} (Eliminar una respuesta)
	PUT /respuestas/{respuestaId} (Editar una respuesta)

	Roles y Permisos:Administrador:
	Usuarios: Crear, leer, actualizar, eliminar, bloquear/desbloquear, asignar roles.
	T√≥picos: Crear, leer, actualizar, eliminar.
	Respuestas: Crear, leer, actualizar, eliminar.
	Moderador:
	T√≥picos: Crear, leer, actualizar, eliminar, mover, cerrar.
	Respuestas: Crear, leer, actualizar, eliminar, marcar como inapropiadas.
	Usuario:
	T√≥picos: Crear, leer, editar y eliminar propios.
	Respuestas: Crear, leer, editar y eliminar propias.
 2. Implementaci√≥n de Entidades y Repositorios:
	Entidad Usuario: Implementada
	Repositorio Usuario: Implementado
	Entidad T√≥pico: Implementada
	Repositorio T√≥pico: Implementado
	Entidad Respuesta: Implementada
	Repositorio Respuesta: Implementado
   
 3. Implementaci√≥n de Controladores:
     [COMPLETADO] Crear controladores para Usuario, T√≥pico y Respuesta.
 4. Autenticaci√≥n y Seguridad (Spring Security):
     UserDetailsServiceImpl: Implementada (revisar manejo de roles)
     UserDetailsImpl: Implementada (revisar mapeo de atributos y l√≥gica adicional)
     [PENDIENTE] Configurar Spring Security para proteger endpoints y definir roles.
 5. Manejo de Errores:
     [PENDIENTE] Definir estrategia para manejar errores y excepciones.
	[PENDIENTE] Considerar la creaci√≥n de clases de excepci√≥n personalizadas.
 6. Pruebas:
     [PENDIENTE] Definir plan de pruebas unitarias e de integraci√≥n.
	[PENDIENTE] Implementar pruebas.
 7. Documentaci√≥n (Swagger):
     [PENDIENTE] Configurar Swagger para generar documentaci√≥n de la API.
 8. Despliegue:
     [PENDIENTE] Definir estrategia de despliegue.
 9. √Åreas de Mejora:
     [PENDIENTE] Identificar posibles mejoras o funcionalidades adicionales.


Dise√±o y modelacion
Dibujar Diagrama de Clases.
********
autenticacion y seguridad spring security

Configurar Spring Security para proteger endpoints y definir roles:
Considerar usar @Secured para una sintaxis m√°s concisa.
Centralizar definiciones de roles y permisos.
Optimizar obtenci√≥n de roles en UserDetailsServiceImpl con cach√©.
Agregar l√≥gica adicional en UserDetailsImpl para atributos espec√≠ficos.
Revisar configuraci√≥n general de Spring Security (autenticaci√≥n, CORS, sesiones).
Escribir pruebas de seguridad (unitarias e de integraci√≥n).
***********
MANEJO DE ERRORES
Definir estrategia para manejar errores y excepciones.
Considerar la creaci√≥n de clases de excepci√≥n personalizadas.
******************
PRUEBAS
Definir plan de pruebas unitarias e de integraci√≥n.
Implementar pruebas.
*********
DOCUMENTACION SWAGGER
Configurar Swagger para generar documentaci√≥n de la API.
***************
DESPLIEGUE
Definir estrategia de despliegue.
************
AREAS A MEJORAR
Identificar posibles mejoras o funcionalidades adicionales.

Prompt para proxima conversacion: 
Soy Alex, estamos trabajando en el proyecto "Foro Hub", una API REST para un foro. Ya hemos definido los endpoints, implementado las entidades, repositorios y controladores. 
Ahora necesitamos mejorar la configuraci√≥n de Spring Security para proteger los endpoints y gestionar los roles de forma eficiente. Tambi√©n debemos escribir pruebas de seguridad, definir una estrategia para el manejo de errores, implementar pruebas unitarias e de integraci√≥n, configurar Swagger y definir una estrategia de despliegue. 
¬øPuedes ayudarme con estas tareas?

xml
png
svg
html


****************************************************************

TAREAS COMPLETADAS
‚úÖ Asignaci√≥n de Roles:
‚úÖ Crear endpoints en AdminController para asignar y quitar roles a usuarios.
‚úÖ Implementar la l√≥gica para actualizar la relaci√≥n entre usuarios y roles en la base de datos.
‚úÖ Validar que solo administradores puedan realizar estas operaciones.
‚úÖ Manejo de Errores:
‚úÖ Definir una estrategia clara para manejar errores y excepciones.
‚úÖ Crear clases de excepci√≥n personalizadas para errores espec√≠ficos de la aplicaci√≥n.
‚úÖ Implementar un controlador global de excepciones (@ControllerAdvice) con m√©todos @ExceptionHandler.
‚úÖ Devolver respuestas HTTP adecuadas (400, 404, 403, 500, etc.).
‚úÖ Pruebas Unitarias para UsuarioService.crearUsuario:
‚úÖ Crear la clase de prueba UsuarioServiceTest.
‚úÖ Escribir la prueba crearUsuario_deberiaGuardarUsuarioEnRepositorio.
‚úÖ Utilizar Mockito para crear un mock de UsuarioRepository.
‚úÖ Verificar que el m√©todo save del repositorio se llama correctamente.

TAREAS PRIORITARIAS
üö® Ejecutar Pruebas:
Ejecutar la prueba crearUsuario_deberiaGuardarUsuarioEnRepositorio y analizar los resultados.
üö® Escribir m√°s Pruebas Unitarias:
Dise√±ar e implementar pruebas para otras funcionalidades cr√≠ticas de la aplicaci√≥n, como:
Registro y autenticaci√≥n de usuarios.
Creaci√≥n y gesti√≥n de t√≥picos.
Publicaci√≥n y gesti√≥n de respuestas.
Comentarios.
Roles y permisos.

TAREAS SECUNDARIAS
Diagrama de Clases: Mejorar el diagrama con relaciones y cardinalidad.
Documentaci√≥n (Swagger): Configurar Swagger para generar documentaci√≥n de la API.
Despliegue: Definir una estrategia de despliegue para poner la aplicaci√≥n en producci√≥n.

**********************************************
Avances:12/07/2024

Entidades, Repositorios y Controladores: Implementados.
Autenticaci√≥n y Seguridad (Spring Security): Implementada autenticaci√≥n basada en JWT, roles y permisos definidos.
Manejo de Errores: Implementadas excepciones personalizadas y un controlador global de excepciones.

TAREA PENDIENTE
Escribir Pruebas Unitarias e de Integraci√≥n:
Dise√±ar e implementar pruebas para cubrir todas las funcionalidades cr√≠ticas de la aplicaci√≥n, incluyendo registro y autenticaci√≥n de usuarios, creaci√≥n y gesti√≥n de t√≥picos, publicaci√≥n y gesti√≥n de respuestas, comentarios, y roles y permisos.
Utilizar frameworks como JUnit y Mockito para las pruebas.
Asegurar que la autorizaci√≥n funciona correctamente y que los usuarios solo pueden acceder a las funcionalidades permitidas seg√∫n su rol.
PRIORIDAD MEDIA 
Documentaci√≥n (Swagger):
Configurar Swagger para generar documentaci√≥n de la API y facilitar su uso por parte de otros desarrolladores.
Diagrama de Clases:

Mejorar el diagrama de clases con relaciones y cardinalidad para una mejor visualizaci√≥n de la estructura de la aplicaci√≥n.
Despliegue:

Definir una estrategia de despliegue para poner la aplicaci√≥n en producci√≥n (por ejemplo, en un servidor en la nube).
√Åreas de Mejora:

Identificar posibles mejoras o funcionalidades adicionales que podr√≠an agregarse al proyecto.



com.example.ForoHub
‚îú‚îÄ‚îÄ controladores
‚îÇ   ‚îî‚îÄ‚îÄ com.example.ForoHub
‚îú‚îÄ‚îÄ controladores
‚îÇ   ‚îî‚îÄ‚îÄ AuthController.java
‚îú‚îÄ‚îÄ entidades
‚îÇ   ‚îî‚îÄ‚îÄ Usuario.java
‚îú‚îÄ‚îÄ repositorios
‚îÇ   ‚îî‚îÄ‚îÄ UsuarioRepository.java
‚îî‚îÄ‚îÄ servicios
    ‚îî‚îÄ‚îÄ UsuarioService.java.java
‚îú‚îÄ‚îÄ entidades
‚îÇ   ‚îî‚îÄ‚îÄ Usuario.java
‚îú‚îÄ‚îÄ repositorios
‚îÇ   ‚îî‚îÄ‚îÄ UsuarioRepository.java
‚îî‚îÄ‚îÄ servicios
    ‚îî‚îÄ‚îÄ UsuarioService.java
